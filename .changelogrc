## 20-05-2022

`@chakra-ui/react@2.0.3`

- Ensure types used by other chakra packages are properly exported and imported so
  that `src` directory is not referenced in the emitted type declarations.

**Descendant** `v3.0.1`

- Ensure types used by other chakra packages are properly exported and imported so
  that `src` directory is not referenced in the emitted type declarations.

**Theme** `v2.0.2`

- Ensure types used by other chakra packages are properly exported and imported so
  that `src` directory is not referenced in the emitted type declarations.
- Tag component variants borderRadius was overwriting baseStyle eventhough
  borderRadius was same for all variants. borderRadius is now part of the
  baseStyle

**Styled System** `v2.1.0`

- Add support for responsive variants and sizes.

```jsx live=false
<Button variant={['sm', 'lg']}>Click me</Button>
```

Add support for `!important` in token values as an escape hatch for overriding
properties in responsive variants/sizes.

```jsx live=false
<Button variant={['sm', 'lg']} fontSize="lg !important">
  Click me
</Button>
```

**Notes**

- Based on how this is designed, there's no support for responsive `colorScheme`
  since it is technically not a variant
- When using responsive sizes and variants, overriding properties via props
  might not work as expected. We use native CSS media queries to enable this
  feature so there's no "magic" under the hood. If you really want to override
  properties, you can consider using the important syntax

**System** `v2.1.0`

- Add support for responsive variants and sizes.

```jsx live=false
<Button variant={['sm', 'lg']}>Click me</Button>
```

Add support for `!important` in token values as an escape hatch for overriding
properties in responsive variants/sizes.

```jsx live=false
<Button variant={['sm', 'lg']} fontSize="lg !important">
  Click me
</Button>
```

**Notes**

- Based on how this is designed, there's no support for responsive `colorScheme`
  since it is technically not a variant
- When using responsive sizes and variants, overriding properties via props
  might not work as expected. We use native CSS media queries to enable this
  feature so there's no "magic" under the hood. If you really want to override
  properties, you can consider using the important syntax

**Textarea** `v2.0.1`

- Fix ESLint warnings and errors

**Avatar** `v2.0.1`

- Add referrerPolicy prop to Avatar & Image Components

**Image** `v2.0.1`

- Add referrerPolicy prop to Avatar & Image Components

**Toast** `v2.0.3`

- Fix regression with the default toast position. It now defaults to `bottom` as described in docs

**Focus Lock** `v2.0.1`

- Upgrade dependency `react-focus-lock` to be compatible with React 18
